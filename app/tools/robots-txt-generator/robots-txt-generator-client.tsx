"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Plus, Trash2, Clipboard, Check } from "lucide-react"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"

interface RobotRule {
  id: string
  userAgent: string
  disallow: string[]
  allow: string[]
}

export function RobotsTxtGeneratorClient() {
  const [sitemapUrl, setSitemapUrl] = useState("")
  const [rules, setRules] = useState<RobotRule[]>([
    {
      id: "rule-1",
      userAgent: "*",
      disallow: ["/admin/", "/private/"],
      allow: ["/blog/", "/products/"],
    },
  ])
  const [crawlDelay, setCrawlDelay] = useState("")
  const [noIndex, setNoIndex] = useState(false)
  const [generatedRobotsTxt, setGeneratedRobotsTxt] = useState("")
  const [copied, setCopied] = useState(false)

  const addRule = () => {
    const newRule: RobotRule = {
      id: `rule-${rules.length + 1}`,
      userAgent: "*",
      disallow: [],
      allow: [],
    }
    setRules([...rules, newRule])
  }

  const removeRule = (id: string) => {
    setRules(rules.filter((rule) => rule.id !== id))
  }

  const updateRule = (id: string, field: keyof RobotRule, value: string | string[]) => {
    setRules(
      rules.map((rule) => {
        if (rule.id === id) {
          return { ...rule, [field]: value }
        }
        return rule
      }),
    )
  }

  const handleDisallowChange = (id: string, value: string) => {
    const disallowPaths = value
      .split("\n")
      .map((path) => path.trim())
      .filter((path) => path)
    updateRule(id, "disallow", disallowPaths)
  }

  const handleAllowChange = (id: string, value: string) => {
    const allowPaths = value
      .split("\n")
      .map((path) => path.trim())
      .filter((path) => path)
    updateRule(id, "allow", allowPaths)
  }

  const generateRobotsTxt = () => {
    let robotsTxt = "# robots.txt generated by SiteForge\n"
    robotsTxt += "# https://siteforge.diy\n\n"

    rules.forEach((rule) => {
      robotsTxt += `User-agent: ${rule.userAgent}\n`

      rule.disallow.forEach((path) => {
        robotsTxt += `Disallow: ${path}\n`
      })

      rule.allow.forEach((path) => {
        robotsTxt += `Allow: ${path}\n`
      })

      if (crawlDelay && rule.userAgent === "*") {
        robotsTxt += `Crawl-delay: ${crawlDelay}\n`
      }

      if (noIndex && rule.userAgent === "*") {
        robotsTxt += `Noindex: /\n`
      }

      robotsTxt += "\n"
    })

    if (sitemapUrl) {
      robotsTxt += `Sitemap: ${sitemapUrl}\n`
    }

    setGeneratedRobotsTxt(robotsTxt)
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedRobotsTxt)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div>
        <Card>
          <CardHeader>
            <CardTitle>Configure Robots.txt</CardTitle>
            <CardDescription>Set up rules for search engine crawlers.</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              <div className="space-y-2">
                <label className="text-sm font-medium">Sitemap URL</label>
                <Input
                  placeholder="e.g., https://example.com/sitemap.xml"
                  value={sitemapUrl}
                  onChange={(e) => setSitemapUrl(e.target.value)}
                />
                <p className="text-xs text-gray-500">
                  Adding your sitemap URL helps search engines discover all your pages.
                </p>
              </div>

              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <label className="text-sm font-medium">User-agent Rules</label>
                  <Button variant="outline" size="sm" className="h-8" onClick={addRule}>
                    <Plus className="h-4 w-4 mr-1" /> Add Rule
                  </Button>
                </div>

                <div className="space-y-4">
                  {rules.map((rule) => (
                    <div key={rule.id} className="border rounded-md p-4 space-y-3">
                      <div className="flex items-center justify-between">
                        <h4 className="font-medium">Rule {rule.id.split("-")[1]}</h4>
                        {rules.length > 1 && (
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-8 text-red-500 hover:text-red-700"
                            onClick={() => removeRule(rule.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        )}
                      </div>

                      <div className="space-y-2">
                        <label className="text-sm font-medium">User-agent</label>
                        <Input
                          placeholder="e.g., Googlebot or * for all bots"
                          value={rule.userAgent}
                          onChange={(e) => updateRule(rule.id, "userAgent", e.target.value)}
                        />
                        <p className="text-xs text-gray-500">
                          Use * for all bots, or specify a bot like Googlebot, Bingbot, etc.
                        </p>
                      </div>

                      <div className="space-y-2">
                        <label className="text-sm font-medium">Disallow Paths (one per line)</label>
                        <Textarea
                          placeholder="/admin/&#10;/private/&#10;/tmp/"
                          className="min-h-[100px] font-mono"
                          value={rule.disallow.join("\n")}
                          onChange={(e) => handleDisallowChange(rule.id, e.target.value)}
                        />
                        <p className="text-xs text-gray-500">Paths you want to block search engines from crawling.</p>
                      </div>

                      <div className="space-y-2">
                        <label className="text-sm font-medium">Allow Paths (one per line)</label>
                        <Textarea
                          placeholder="/blog/&#10;/products/"
                          className="min-h-[100px] font-mono"
                          value={rule.allow.join("\n")}
                          onChange={(e) => handleAllowChange(rule.id, e.target.value)}
                        />
                        <p className="text-xs text-gray-500">
                          Paths you want to explicitly allow, useful for allowing specific files within disallowed
                          directories.
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Crawl-delay</label>
                <Input
                  type="number"
                  min="1"
                  placeholder="e.g., 10"
                  value={crawlDelay}
                  onChange={(e) => setCrawlDelay(e.target.value)}
                />
                <p className="text-xs text-gray-500">Number of seconds between requests (supported by some crawlers)</p>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox id="noindex" checked={noIndex} onCheckedChange={(checked) => setNoIndex(!!checked)} />
                <Label
                  htmlFor="noindex"
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  Add noindex directive (not standard but used by some crawlers)
                </Label>
              </div>

              <div className="pt-2">
                <Button onClick={generateRobotsTxt}>Generate Robots.txt</Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div>
        <Card>
          <CardHeader>
            <CardTitle>Generated Robots.txt</CardTitle>
            <CardDescription>Copy and save this as robots.txt in your root directory.</CardDescription>
          </CardHeader>
          <CardContent>
            {generatedRobotsTxt ? (
              <>
                <div className="p-4 bg-gray-50 rounded-md font-mono text-sm overflow-x-auto">
                  <pre className="whitespace-pre-wrap">{generatedRobotsTxt}</pre>
                </div>
                <div className="mt-4 flex justify-end">
                  <Button variant="outline" onClick={copyToClipboard}>
                    {copied ? (
                      <>
                        <Check className="h-4 w-4 mr-2" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Clipboard className="h-4 w-4 mr-2" />
                        Copy to Clipboard
                      </>
                    )}
                  </Button>
                </div>
              </>
            ) : (
              <div className="text-center p-8 text-gray-500">
                <p>
                  Configure your robots.txt settings on the left and click "Generate Robots.txt" to see the result here.
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="mt-6">
          <CardHeader>
            <CardTitle>How to Use</CardTitle>
            <CardDescription>Follow these steps to implement your robots.txt file.</CardDescription>
          </CardHeader>
          <CardContent>
            <ol className="list-decimal list-inside space-y-2 text-sm">
              <li>Copy the generated robots.txt content.</li>
              <li>Create a new file named "robots.txt".</li>
              <li>Paste the content into the file.</li>
              <li>Upload the file to your website's root directory.</li>
              <li>
                Verify it's accessible at <code>https://yourdomain.com/robots.txt</code>.
              </li>
            </ol>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
